// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Map    = require("bs-platform/lib/js/map.js");
var Block    = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");

var TypeMap = $$Map.Make([$$String.compare]);

function baseType(_typ) {
  while(true) {
    var typ = _typ;
    switch (typ.tag | 0) {
      case 6 : 
      case 7 : 
          _typ = typ[0];
          continue ;
          default:
        return typ;
    }
  };
}

function typeName(_typ) {
  while(true) {
    var typ = _typ;
    switch (typ.tag | 0) {
      case 6 : 
      case 7 : 
          _typ = typ[0];
          continue ;
          case 8 : 
          return typ[0];
      default:
        return typ[0][/* name */0];
    }
  };
}

function typeLabel(typ) {
  switch (typ.tag | 0) {
    case 6 : 
        return "[" + (typeLabel(typ[0]) + "]");
    case 7 : 
        return typeLabel(typ[0]) + "!";
    case 8 : 
        return typ[0];
    default:
      return typ[0][/* name */0];
  }
}

var gqlString = /* Scalar */Block.__(0, [/* record */[
      /* name */"String",
      /* description : Some */["A UTF\xe2\x80\x908 character sequence."]
    ]]);

var gqlInt = /* Scalar */Block.__(0, [/* record */[
      /* name */"Int",
      /* description : Some */["A signed 32\xe2\x80\x90bit integer."]
    ]]);

var gqlFloat = /* Scalar */Block.__(0, [/* record */[
      /* name */"Float",
      /* description : Some */["A signed double-precision floating-point value."]
    ]]);

var gqlBoolean = /* Scalar */Block.__(0, [/* record */[
      /* name */"Boolean",
      /* description : Some */["`true` or `false`"]
    ]]);

exports.gqlString  = gqlString;
exports.gqlInt     = gqlInt;
exports.gqlFloat   = gqlFloat;
exports.gqlBoolean = gqlBoolean;
exports.TypeMap    = TypeMap;
exports.baseType   = baseType;
exports.typeName   = typeName;
exports.typeLabel  = typeLabel;
/* TypeMap Not a pure module */
